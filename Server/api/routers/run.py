from fastapi import APIRouter, HTTPException
from typing import Dict, Any, List
from services.workflow_orchestrator import workflow_orchestrator
from pydantic import BaseModel
from datetime import datetime
from db.supabase import get_supabase_client

router = APIRouter()

supabase_client = get_supabase_client()


class WorkflowExecuteRequest(BaseModel):
    workflow_id: str
    user_query: str


class ChatMessage(BaseModel):
    role: str
    message: str
    timestamp: datetime


class WorkflowExecuteResponse(BaseModel):
    workflow_response: Dict[str, Any]
    chat_history: List[ChatMessage]


@router.post("/execute", response_model=WorkflowExecuteResponse)
async def execute_workflow_endpoint(
    payload: WorkflowExecuteRequest,
) -> WorkflowExecuteResponse:
    try:
        # 1. Execute the workflow
        workflow_result = await workflow_orchestrator.execute_workflow(
            workflow_id=payload.workflow_id, user_query=payload.user_query
        )
        print(
            f"[{datetime.now()}] Workflow '{payload.workflow_id}' executed successfully."
        )

        # Extract bot's message from result
        bot_response_message = workflow_result.get(
            "final_response", "No response generated by workflow."
        )

        # 2. Log user message
        try:
            result_user = (
                supabase_client.table("chat_logs")
                .insert(
                    {
                        "workflow_id": payload.workflow_id,
                        "role": "user",
                        "message": payload.user_query,
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                )
                .execute()
            )
            print(f"[{datetime.now()}] User message logged: {result_user}")
        except Exception as log_e:
            print(f"[{datetime.now()}] WARNING: Failed to log user message: {log_e}")

        # 3. Log bot response
        try:
            result_bot = (
                supabase_client.table("chat_logs")
                .insert(
                    {
                        "workflow_id": payload.workflow_id,
                        "role": "bot",
                        "message": bot_response_message,
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                )
                .execute()
            )
            print(f"[{datetime.now()}] Bot message logged: {result_bot}")
        except Exception as log_e:
            print(f"[{datetime.now()}] WARNING: Failed to log bot message: {log_e}")

        # 4. Fetch chat history
        chat_history_list: List[ChatMessage] = []
        try:
            response = (
                supabase_client.table("chat_logs")
                .select("role, message, timestamp")
                .eq("workflow_id", payload.workflow_id)
                .order("timestamp", desc=False)
                .execute()
            )

            if response.data:
                chat_history_list = [ChatMessage(**msg) for msg in response.data]
                print(
                    f"[{datetime.now()}] Retrieved {len(chat_history_list)} chat messages."
                )
            else:
                print(f"[{datetime.now()}] No chat messages found.")
        except Exception as fetch_e:
            print(
                f"[{datetime.now()}] WARNING: Failed to fetch chat history: {fetch_e}"
            )
            chat_history_list = []

        # 5. Return response
        return WorkflowExecuteResponse(
            workflow_response=workflow_result, chat_history=chat_history_list
        )

    except HTTPException as http_exc:
        print(f"[{datetime.now()}] HTTPException: {http_exc.detail}")
        raise http_exc
    except Exception as e:
        print(f"[{datetime.now()}] CRITICAL ERROR: {e}")
        raise HTTPException(
            status_code=500, detail=f"Failed to execute workflow: {str(e)}"
        )
